#!/bin/bash

#
# Functions
#

# Function to format text as bold
bold() {
    echo -e "\033[1m$1\033[0m"
}

#
# Script
#

# Get the package name from the command-line argument or prompt the user
if [ -z "$1" ]; then
    read -p "Enter your package name: " package_name
else
    package_name=$1
fi

# Check if the folder already exists
if [ -d "$package_name" ]; then
    echo "Error: The folder '$package_name' already exists. Please choose a different package name or delete that folder before running this script."
    exit 1
fi

# Create a folder and set up an empty git repository
echo "$(bold "Step 1"): Creating a new folder '$package_name'"
mkdir $package_name
cd $package_name

echo "$(bold "Step 2"): Initializing git repository with an empty initial commit"
git init
git commit -m 'initial commit' --allow-empty

# Set up npm
echo "$(bold "Step 3"): Initializing npm"
npm init -y

echo "$(bold "Step 4"): Setting up GitHub actions"
mkdir -p .github/workflows
touch .github/workflows/ci.yml
echo '
name: CI build
on: [push]
jobs:
  Build-And-Test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20]
    name: Node ${{ matrix.node }} sample
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm test
      - run: npm run test:coverage
      - run: npm run lint
      - run: npm run check-format
      - run: npm run build
' > .github/workflows/ci.yml

echo "$(bold "Step 5"): Writing eslint config"
echo '
import pluginJs from "@eslint/js";
import comments from "@eslint-community/eslint-plugin-eslint-comments/configs";
import simpleImportSort from "eslint-plugin-simple-import-sort";
import globals from "globals";
import tseslint from "typescript-eslint";


/** @type {import('eslint').Linter.Config[]} */
export default [
  {files: ["**/*.{ts,tsx}"]},
  {files: ["**/*.ts"], languageOptions: {sourceType: "script"}},
  {languageOptions: { globals: globals.node }},
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  comments.recommended,
  {
    rules: {
      "@eslint-community/eslint-comments/no-unused-disable": "error"
    }
  },
  {
    plugins: {
      "simple-import-sort": simpleImportSort,
    },
    rules: {
      "simple-import-sort/imports": "error",
      "simple-import-sort/exports": "error",
    },
  },
  {
    rules: {
      "no-console": "error",
      "no-duplicate-imports": "error",
      "max-depth": ["error", 2],
      "max-nested-callbacks": ["error", 2],
      "max-lines-per-function": ["error", 56],
      "max-statements": ["error", 22],
      "max-params": ["error", 3],
    }
  }
];
' > eslint.config.mjs

# Install TypeScript, ESLint, and Prettier
echo "$(bold "Step 6"): Installing dev dependencies"
npm install --save-dev typescript eslint prettier jest ts-jest @types/jest typescript-eslint @eslint-community/eslint-plugin-eslint-comments @eslint/js globals eslint-plugin-simple-import-sort

# Initialize TypeScript and Prettier
echo "$(bold "Step 7"): Initializing TypeScript"
npx tsc --init --outDir './dist'

echo "Step 8: Initializing Prettier"
npx prettier --write .
echo 'coverage
dist' > .prettierignore


echo "$(bold "Step 8"): Adding .gitignore"
echo '.env
node_modules
' > .gitignore

echo "$(bold "Step 9"): Adding Jest config"
echo '/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
  preset: "ts-jest",
  testEnvironment: "node",
  testPathIgnorePatterns: ["<rootDir>/node_modules/", "<rootDir>/dist/"],
};
' > jest.config.js

# Add useful commands to package.json
echo "$(bold "Step 10"): Adding scripts to package.json"
if ! command -v jq >/dev/null 2>&1; then
    echo "jq is not installed on your system. try installing it to fully automate this bootstrapping"
    echo "$(bold "You are almost done!") You can now add the following scripts section to your package.json:"
    echo '
      "scripts": {
        "build": "tsc",
        "test": "jest",
        "test:coverage": "jest --coverage",
        "check-format": "prettier --check .",
        "fix-format": "prettier --write .",
        "lint": "eslint .",
        "fix-lint": "eslint . --fix",
        "fix": "npm run fix-format && npm run fix-lint"
      },
    '
    exit 1
fi
jq '.scripts.build = "tsc ."' package.json > temp.json && mv temp.json package.json
jq '.scripts.test = "jest"' package.json > temp.json && mv temp.json package.json
jq '.scripts."test:coverage" = "jest --coverage"' package.json > temp.json && mv temp.json package.json
jq '.scripts."check-format" = "prettier --check ."' package.json > temp.json && mv temp.json package.json
jq '.scripts."fix-format" = "prettier --write ."' package.json > temp.json && mv temp.json package.json
jq '.scripts.lint = "eslint ."' package.json > temp.json && mv temp.json package.json
jq '.scripts."fix-lint" = "eslint . --fix"' package.json > temp.json && mv temp.json package.json
jq '.scripts.fix = "npm run fix-format && npm run fix-lint"' package.json > temp.json && mv temp.json package.json
